all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
#cut(dist_final, breaks = 10)
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/2),xlim=c(0,read_length+100),breaks=20,col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("All_final_copies42.fasta",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
#cut(dist_final, breaks = 10)
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/4),xlim=c(0,read_length+100),breaks=20,col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("All_final_copies42.fasta",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
#cut(dist_final, breaks = 10)
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/4),xlim=c(0,read_length+100),breaks="Sturges",col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("All_final_copies14.fasta",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
#cut(dist_final, breaks = 10)
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/4),xlim=c(0,read_length+100),breaks="Sturges",col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("All_final_copies14.fasta",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
#cut(dist_final, breaks = 10)
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/2),xlim=c(0,read_length+100),breaks="Sturges",col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("All_final_copies42.fasta",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
#cut(dist_final, breaks = 10)
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/2),xlim=c(0,read_length+100),breaks="Sturges",col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("All_final_copies14.fasta",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
#cut(dist_final, breaks = 10)
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/2),xlim=c(0,read_length+100),breaks="Sturges",col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
library(copyseparator)
copy_validate("All_final_copies.fasta",2,300,1)
setwd("~/Desktop/copy_validate")
copy_validate("All_final_copies.fasta",2,300,1)
setwd("~/Desktop/copyseparator")
copy_validate("All_final_copies.fasta",2,300,1)
subset_downsize("copy_separate("toydata.fasta",2,300,225,1)",300,225,1)
subset_downsize("copy_separate("toydata.fasta",300,225,1)
subset_downsize("toydata.fasta",300,225,1)
library(copyseparator)
head(toydata)
head(toydata.fasta)
head("toydata.fasta")
data("toydata.fasta")
data(toydata.fasta)
devtools::run_examples()
setwd("~/Desktop/copyseparator/data")
data(toydata.fasta)
head("toydata.fasta")
tail("toydata.fasta")
head(toydata.fasta)
devtools::document()
library(copyseparator)
library(copyseparator)
devtools::document()
devtools::document()
library(copyseparator)
devtools::document()
devtools::document()
copy_detect("data/subset.fasta",2,1)
library(copyseparator)
devtools::document()
devtools::document()
devtools::document()
setwd("~/Desktop/test")
filename="toysubset.fasta"
copy_number=2
verbose=1
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
if (copy_number<=1) stop ("The expected copy number must be a number larger than one!")
Subset <- ape::as.character.DNAbin(ape::read.FASTA(file=filename, type = "DNA"))
if (verbose) { cat(paste0("Clustering analyses for ", filename,"\n"))}
filename_short <- gsub("[:.:].*","", filename) # remove file extensions, e.g. ".fasta", ".txt"
# find the threshold range for OTU to find the major clusters (number=copy_number) for each subset
for (m in seq(0.3,1, by = 0.1)) {
Subset_OTU <- kmer::otu(Subset, k = 5, threshold = m, method = "central", nstart = 20)
if (verbose) { cat(paste0("threshold = ",m),"\n")}
if (verbose) { cat(unique(Subset_OTU),"\n")}
if (length(unique(Subset_OTU))>=copy_number) {break}
}
# try different threshold values in the range found above
for (i in seq(m-0.09,m, by = 0.01)) {
Subset_OTU <- kmer::otu(Subset, k = 5, threshold = i, method = "central", nstart = 20)
if (verbose) { cat(paste0("threshold = ",i),"\n")}
if (verbose) { cat(unique(Subset_OTU),"\n")}
if (length(unique(Subset_OTU))>=copy_number) {break}
}
reads_each_cluster <- sapply(unique(Subset_OTU), function(x) length(which(Subset_OTU==x)))
if (verbose) { cat(paste0("Best threshold found = ",i),"\n")}
if (verbose) { cat(unique(Subset_OTU),"\n")}
if (verbose) { cat("Number of reads in each cluster\n")}
if (verbose) { cat(reads_each_cluster,"\n")}
for (j in (1:copy_number)) {
Picked_cluster <- Subset[which(Subset_OTU==unique(Subset_OTU)[which(reads_each_cluster==sort(reads_each_cluster)[length(unique(Subset_OTU))-j+1])])]
seqinr::write.fasta(sequences = Picked_cluster,
names = labels(Picked_cluster),
file.out = paste0(filename_short,"_cluster_",j,".fasta"))
if (verbose) { cat(paste0("Number of reads in picked cluster ",j, " = ", length(Picked_cluster),"\n"))}
# calcuate the consensus sequence for the clusters of the subset
seqinr::write.fasta(sequences = as.character(DECIPHER::ConsensusSequence(Biostrings::readDNAStringSet(paste0(filename_short,"_cluster_",j,".fasta"),format="fasta",nrec=-1L, skip=0L),threshold = 0.4,
ambiguity = TRUE, noConsensusChar = "N")[1]),names = paste0(filename_short,"_cluster_",j,"_consensus"), file.out = paste0(filename_short,"_cluster_",j,"_consensus.fasta"))
}
# put together all the consensus sequences into one file
Consensus_list <- stringr::str_sort(list.files(pattern="_consensus.fasta"), numeric = TRUE)
Consensus_list
1:length(Consensus_list)
Consensus_list[1]
# put together all the consensus sequences into one file
Consensus_list <- stringr::str_sort(list.files(pattern="_consensus.fasta"), numeric = TRUE)
All_consensus <- lapply(1:length(Consensus_list), function (x) seqinr::read.fasta(file = Consensus_list[x], seqtype = "DNA",
as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE, whole.header = TRUE))
seqinr::write.fasta(sequences=All_consensus, names=Consensus_list, file.out=paste0(filename_short,"_consensus_list.fasta"))
cat("Run finished!\n")
beepr::beep(sound = 1, expr = NULL) # make a sound when run finishes
options("error" = error_log_function)
sink() # turn off log
Consensus_list[[1]]
Consensus_list[1]
setwd("~/Desktop/copyseparator")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(copyseparator)
devtools::document()
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
devtools::document()
devtools::document()
setwd("~/Desktop/copyseparator")
devtools::document()
usethis::use_testthat
usethis::use_testthat()
use_test()
usethis::use_test()
library(copyseparator)
setwd("~/Desktop/copy_detect")
filename="toysubset.fasta"
copy_number=2
verbose=1
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
if (copy_number<=1) stop ("The expected copy number must be a number larger than one!")
Subset <- ape::as.character.DNAbin(ape::read.FASTA(file=filename, type = "DNA"))
if (verbose) { cat(paste0("Clustering analyses for ", filename,"\n"))}
filename_short <- gsub("[:.:].*","", filename) # remove file extensions, e.g. ".fasta", ".txt"
# find the threshold range for OTU to find the major clusters (number=copy_number) for each subset
for (m in seq(0.3,1, by = 0.1)) {
Subset_OTU <- kmer::otu(Subset, k = 5, threshold = m, method = "central", nstart = 20)
if (verbose) { cat(paste0("threshold = ",m),"\n")}
if (verbose) { cat(unique(Subset_OTU),"\n")}
if (length(unique(Subset_OTU))>=copy_number) {break}
}
# try different threshold values in the range found above
for (i in seq(m-0.09,m, by = 0.01)) {
Subset_OTU <- kmer::otu(Subset, k = 5, threshold = i, method = "central", nstart = 20)
if (verbose) { cat(paste0("threshold = ",i),"\n")}
if (verbose) { cat(unique(Subset_OTU),"\n")}
if (length(unique(Subset_OTU))>=copy_number) {break}
}
reads_each_cluster <- sapply(unique(Subset_OTU), function(x) length(which(Subset_OTU==x)))
if (verbose) { cat(paste0("Best threshold found = ",i),"\n")}
if (verbose) { cat(unique(Subset_OTU),"\n")}
if (verbose) { cat("Number of reads in each cluster\n")}
if (verbose) { cat(reads_each_cluster,"\n")}
for (j in (1:copy_number)) {
Picked_cluster <- Subset[which(Subset_OTU==unique(Subset_OTU)[which(reads_each_cluster==sort(reads_each_cluster)[length(unique(Subset_OTU))-j+1])])]
seqinr::write.fasta(sequences = Picked_cluster,
names = labels(Picked_cluster),
file.out = paste0(filename_short,"_cluster_",j,".fasta"))
if (verbose) { cat(paste0("Number of reads in picked cluster ",j, " = ", length(Picked_cluster),"\n"))}
# calcuate the consensus sequence for the clusters of the subset
seqinr::write.fasta(sequences = as.character(DECIPHER::ConsensusSequence(Biostrings::readDNAStringSet(paste0(filename_short,"_cluster_",j,".fasta"),format="fasta",nrec=-1L, skip=0L),threshold = 0.4,
ambiguity = TRUE, noConsensusChar = "N")[1]),names = paste0(filename_short,"_cluster_",j,"_consensus"), file.out = paste0(filename_short,"_cluster_",j,"_consensus.fasta"))
}
# put together all the consensus sequences into one file
Consensus_list <- stringr::str_sort(list.files(pattern="_consensus.fasta"), numeric = TRUE)
All_consensus <- lapply(1:length(Consensus_list), function (x) seqinr::read.fasta(file = Consensus_list[x], seqtype = "DNA",
as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE, whole.header = TRUE))
seqinr::write.fasta(sequences=All_consensus, names=Consensus_list, file.out=paste0(filename_short,"_consensus_list.fasta"))
cat("Run finished!\n")
beepr::beep(sound = 1, expr = NULL) # make a sound when run finishes
options("error" = error_log_function)
sink() # turn off log
All_consensus
names(All_consensus)
names(All_consensus[])
All_consensus[1]
All_consensus[[1]]
names(All_consensus[[1]])
class(All_consensus)
as.data.frame(All_consensus)
names(as.data.frame(All_consensus))
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
save(toydata.fasta", file="data/toydata.RData")
save("toydata.fasta", file="data/toydata.RData")
save("data/toydata.fasta", file="data/toydata.RData")
getwd
getwd()
setwd("~/Desktop/copyseparator")
save("data/toydata.fasta", file="data/toydata.RData")
setwd("~/Desktop/copyseparator/data")
save("toydata.fasta", file="toydata.RData")
save(toydata.fasta, file="toydata.RData")
save("data/toydata.fasta", file="data/toydata.RData")
save(data/toydata.fasta, file="data/toydata.RData")
NGS_reads <- seqinr::read.fasta(file = "data/toydata.fasta",seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
save(NGS_reads, file="data/toydata.RData")
subset <- seqinr::read.fasta(file = "data/toysubset.fasta",seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
save(subset, file="data/toysubset.RData")
final_copies <- seqinr::read.fasta(file = "data/Final_two_copies.fasta",seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
save(final_copies, file="data/Final_two_copies.RData")
load("/Users/lyang1/Desktop/copyseparator/data/toydata.RData")
load("/Users/lyang1/Desktop/copyseparator/data/Final_two_copies.RData")
load("/Users/lyang1/Desktop/copyseparator/data/toysubset.RData")
library(copyseparator)
library(copyseparator)
library(copyseparator)
setwd("~/Desktop/copyseparator/data")
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
devtools::document()
warning()
warings()
warnings()
library(copyseparator)
warnings()
devtools::check()
devtools::check()
load("/Users/lyang1/Desktop/Copysep/Final_two_copies.RData")
ls
ls()
load("~/Desktop/copyseparator/.RData")
get(load("/Users/lyang1/Desktop/Copysep/Final_two_copies.RData"))
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
library(copyseparator)
devtools::document()
devtools::check()
devtools::check()
load("/Users/lyang1/Desktop/Copysep/Final_two_copies.RData")
get(load("/Users/lyang1/Desktop/Copysep/Final_two_copies.RData"))
input_data <- get(load("/Users/lyang1/Desktop/Copysep/Final_two_copies.RData"))
class(input_data)
as.Fasta(input_data)
loadFasta(input_data)
readRDS("/Users/lyang1/Desktop/Copysep/Final_two_copies.RData")
dat2fasta(input_data, outfile = "out.fasta")
write.fasta(input_data)
seqinr::write.fasta(sequences = input_data, names = names(input_data), file.out = "Final_two_copies.fasta"))
seqinr::write.fasta(sequences = input_data, names = names(input_data), file.out = "Final_two_copies.fasta")
mydata <- "data/combined_con.fasta"
save(mydata, "data/combined_con.RData")
save(mydata, file="data/combined_con.RData")
mydata
mydata <- seqinr::read.fasta(file = "data/combined_con.fasta"",seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
mydata <- read.fasta(file = "data/combined_con.fasta"",seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
mydata <- seqinr::read.fasta(file = "data/combined_con.fasta",seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
mydata <- seqinr::read.fasta(file = data/combined_con.fasta,seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
mydata <- seqinr::read.fasta(file = data/combined_con.fasta,seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
getwd()
mydata <- seqinr::read.fasta(file = data/combined_con.fasta,seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
setwd("~/Desktop/copyseparator/data")
mydata <- seqinr::read.fasta(file = data/combined_con.fasta,seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
mydata <- seqinr::read.fasta(file = "data/combined_con.fasta",seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
getwd()
setwd("~/Desktop/copyseparator")
mydata <- seqinr::read.fasta(file = "data/combined_con.fasta",seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
mydata
save(mydata, file="data/combined_con.RData")
get(load("data/Final_two_copies.RData"))
library(copyseparator)
devtools::document()
devtools::check()
library(copyseparator)
devtools::document()
devtools::check()
devtools::check()
library(copyseparator)
library(copyseparator)
devtools::document()
devtools::check()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::check()
load("/Users/lyang1/Desktop/copyseparator/data/toydata.RData")
get(load("/Users/lyang1/Desktop/copyseparator/data/toydata.RData"))
devtools::load_all(".")
devtools::document()
devtools::check()
load("~/Desktop/copyseparator/.RData")
