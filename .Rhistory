ambiguity_num <- append(ambiguity_num, sum(as.integer(str_count(as.character(ConsensusSequence(readDNAStringSet(paste0("cnx_",i,"_",i+copy_number+j-l,".fasta"), format="fasta",nrec=-1L, skip=0L),
threshold = 0.4,ambiguity = TRUE, noConsensusChar = "N")), c("M", "K", "R", "Y","N","W", "S", "H", "V", "D", "B")))))
cat(paste0("Matching sequences ",i, " & ", i+copy_number+j-l, "\n"))
}
cat("Number of ambiguous sites for each match:", ambiguity_num, "\n")
cat(paste0("--- The pair ", which(as.numeric(ambiguity_num)==min(as.numeric(ambiguity_num))), " has fewer ambiguous sites and should be assembled together\n"))
seq_to_con <- append(seq_to_con, paste0("A",i,"B_A",i+copy_number+which(as.numeric(ambiguity_num)==min(as.numeric(ambiguity_num)))-l,"B"))
}
}
seq_to_con1 <- seq_to_con[str_order(seq_to_con, decreasing = FALSE, na_last = TRUE, locale = "en",numeric = TRUE)] # order numerically
unlink(list.files(pattern="cnx_")) # Delete all intermediate files whose names begin with "cnx_"
cat("*************************************************************************\n")
# To find out which sequences belong to which gene copy
Copy_list <- data.frame()
for (i in 1:copy_number) {
cp <- c(i)
for (j in 1:(subset_sum-copy_number)) {
m <- which(gsub(".*_", "", seq_to_con1[cp[j]]) == gsub("_.*", "", seq_to_con1)) # From A1B_A4B to A4B_A5B, then to A5B_A8B, then to A8B_A10B ...; linking 1, 4, 5, 8, 10 ...
cp <- append(cp,m)
}
cp_all <- as.numeric(gsub("[AB]","",c(gsub("_.*", "", seq_to_con1[cp]), gsub(".*_", "", seq_to_con1[cp][subset_sum-copy_number+1]))))
Copy_list <- append(Copy_list,as.data.frame(cp_all))
}
seq_list <- character(0)
for (i in 1:copy_number) {
cat("List of sequences to be assembled for gene copy", i, ": ", Copy_list[[i]], "\n")
for (j in (1:copy_number)[-i]){
seq_list <- append(seq_list, intersect(as.character(Copy_list[[i]]),as.character(Copy_list[[j]])))
}
}
cat("--- Sequences appeared in multiple lists: ", str_sort(unique(seq_list), numeric=TRUE), "\n")
cat("Warning! If there are sequences involved in the assembling of multiple gene copies, please check your input file carefully and try to do the assembling again or do it manually!\n")
all_copies_final <- character(0)
for (i in 1:copy_number) {
copy_subseqs <- lapply(as.numeric(unlist(Copy_list[i])), function(x) Consensus_seq[x])
copy_subseqs_name <- lapply(as.numeric(unlist(Copy_list[i])), function(x) names(Consensus_seq[x]))
write.fasta(sequences = copy_subseqs, copy_subseqs_name,file.out=paste0("Copy_",i,"_subseqs.fasta"))
write.fasta(sequences = as.character(ConsensusSequence(readDNAStringSet(paste0("Copy_",i,"_subseqs.fasta"), format="fasta",nrec=-1L, skip=0L),
threshold = 0.4,ambiguity = TRUE, noConsensusChar = "N")), paste0("Copy_",i,"_final"),file.out=paste0("Copy_",i,"_final.fasta"))
all_copies_final <- append(all_copies_final, read.fasta (paste0("Copy_",i,"_final.fasta"), seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE))
}
write.fasta(sequences = all_copies_final, names(all_copies_final),file.out=paste0("All_final_copies.fasta"))
unlink(list.files(pattern="_final.fasta"))
cat("*************************************************************************\n")
cat(red("Run finished!\n"))
beep(sound = 1, expr = NULL) # make a sound when run finishes
options("error" = error_log_function)
sink() # turn off log
library(copyseparator)
subset_downsize<-function(filename,read_length,overlap)
{
# import the read alignment exported from Geneious
library(ape)
library(seqinr)
library(stringr)
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
if (copy_number<=1) stop ("The expected copy number must be a number larger than one!")
if (read_length<250) warning ("This method is designed for read length 250bp or longer. Short reads can easily result in chimeric sequences.")
NGS_reads <- read.fasta(file = filename,seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
total_reads <- length(NGS_reads); cat(paste0("Total number of reads imported = ",total_reads,"\n"))
alignment_length <- nchar(NGS_reads[[1]]); cat(paste0("Length of the alignment = ",alignment_length,"\n"))
cat(paste0("Read length = ",read_length,"\n"))
cat(paste0("Overlap between adjacent subsets = ",overlap,"\n"))
if (overlap>=read_length) stop("Overlap between adjacent subsets must be smaller than the read length!")
begin_number <- seq(1,alignment_length-200, by=read_length-overlap); cat("Beginning position of each subset","\n"); cat(begin_number,"\n")
end_number <- begin_number+read_length-1; cat("Ending position of each subset\n"); cat(end_number,"\n")
number_of_subsets <- length(begin_number); cat(paste0("Total number of subsets = ",number_of_subsets,"\n"))
for (i in begin_number) {
subset_original <- lapply(1:total_reads, function(x) {substr(NGS_reads[x],i,i+read_length-1)}) # begin to subdivide the big alignment into subsets, each has the length of read_length
subset_small <- subset_original[which(as.character(lapply(1:total_reads, function(x) {substr(subset_original[x],1,10)}))!="----------")]
subset_smaller <- subset_small[which(as.character(lapply(1:length(subset_small), function(x) {substr(subset_small[x],200,209)}))!="----------")]
subset_smallest <- subset_smaller[which(lapply(1:total_reads, function(x) {str_count(substr(subset_smaller[x],1,200),"A")>25})==TRUE)]
cat(paste0("Number of reads in subset ", which(begin_number==i), " = ",length(subset_smallest),"\n"))
if (length(subset_smallest)<=2) stop("This subset has too few reads (<2). Enter a new value for the parameter 'overlap' and subset the dataset again!")
write.fasta(sequences = subset_smallest, names = 1:length(subset_smallest), file.out = paste0("Subset_",which(begin_number==i),"_downsized.fasta"))
}
Subsets <- str_sort(list.files(pattern="_downsized.fasta"), numeric = TRUE)
cat("Subsetting and downsizing finished!\n")
}
subset_downsize("Pseudobarbus_asper_I22242.fasta",300,225)
subset_downsize<-function(filename,read_length,overlap)
{
# import the read alignment exported from Geneious
library(ape)
library(seqinr)
library(stringr)
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
#if (copy_number<=1) stop ("The expected copy number must be a number larger than one!")
if (read_length<250) warning ("This method is designed for read length 250bp or longer. Short reads can easily result in chimeric sequences.")
NGS_reads <- read.fasta(file = filename,seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
total_reads <- length(NGS_reads); cat(paste0("Total number of reads imported = ",total_reads,"\n"))
alignment_length <- nchar(NGS_reads[[1]]); cat(paste0("Length of the alignment = ",alignment_length,"\n"))
cat(paste0("Read length = ",read_length,"\n"))
cat(paste0("Overlap between adjacent subsets = ",overlap,"\n"))
if (overlap>=read_length) stop("Overlap between adjacent subsets must be smaller than the read length!")
begin_number <- seq(1,alignment_length-200, by=read_length-overlap); cat("Beginning position of each subset","\n"); cat(begin_number,"\n")
end_number <- begin_number+read_length-1; cat("Ending position of each subset\n"); cat(end_number,"\n")
number_of_subsets <- length(begin_number); cat(paste0("Total number of subsets = ",number_of_subsets,"\n"))
for (i in begin_number) {
subset_original <- lapply(1:total_reads, function(x) {substr(NGS_reads[x],i,i+read_length-1)}) # begin to subdivide the big alignment into subsets, each has the length of read_length
subset_small <- subset_original[which(as.character(lapply(1:total_reads, function(x) {substr(subset_original[x],1,10)}))!="----------")]
subset_smaller <- subset_small[which(as.character(lapply(1:length(subset_small), function(x) {substr(subset_small[x],200,209)}))!="----------")]
subset_smallest <- subset_smaller[which(lapply(1:total_reads, function(x) {str_count(substr(subset_smaller[x],1,200),"A")>25})==TRUE)]
cat(paste0("Number of reads in subset ", which(begin_number==i), " = ",length(subset_smallest),"\n"))
if (length(subset_smallest)<=2) stop("This subset has too few reads (<2). Enter a new value for the parameter 'overlap' and subset the dataset again!")
write.fasta(sequences = subset_smallest, names = 1:length(subset_smallest), file.out = paste0("Subset_",which(begin_number==i),"_downsized.fasta"))
}
Subsets <- str_sort(list.files(pattern="_downsized.fasta"), numeric = TRUE)
cat("Subsetting and downsizing finished!\n")
}
subset_downsize("Pseudobarbus_asper_I22242.fasta",300,225)
subset_downsize("Pseudobarbus_asper_I22242.fasta",300,225)
setwd("~/Desktop/copyseparator")
subset_downsize("Pseudobarbus_asper_I22242.fasta",300,225)
subset_downsize("Pseudobarbus_asper_I22242.fasta",300,275)
library(copyseparator)
setwd("~/Desktop/copyseparator")
copy_detect("Subset_35_downsized.fasta",2,0.45,0.9,10)
copy_detect("Subset_35_downsized.fasta",2,0.45,0.9,2)
copy_detect("Subset_35_downsized.fasta",2,0.45,0.9,5)
copy_detect("Subset_35_downsized.fasta",2,0.3,0.9,5)
copy_detect("Subset_35_downsized.fasta",2,0.38,0.9,7)
library(copyseparator)
library(copyseparator)
library(copyseparator)
setwd("~/Desktop/copy_validate")
library(seqinr)
library(Biostrings)
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("Carpiodes_carpio_Paralogs_original.txt",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/2),xlim=c(0,read_length+100),breaks=20,col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
View(error_log_function)
View(error_log_function)
View(dist_var_sites)
View(all_dist)
View(all_copies)
X <- lsf.str()
as.vector(X) # just for printing purposes, you can use the vector in rm()
rm(list=X)
list.functions.in.file(rstudioapi::getSourceEditorContext()$path, alphabetic = TRUE)
install.packages("NCmisc")
list.functions.in.file(filename, alphabetic = TRUE)
library(NCmisc)
list.functions.in.file(filename, alphabetic = TRUE)
list.functions.in.file(rstudioapi::getSourceEditorContext()$path, alphabetic = TRUE)
library(seqinr)
library(Biostrings)
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("Carpiodes_carpio_Paralogs_original.txt",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/2),xlim=c(0,read_length+100),breaks=20,col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
#library(seqinr)
library(Biostrings)
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("Carpiodes_carpio_Paralogs_original.txt",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/2),xlim=c(0,read_length+100),breaks=20,col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
library(seqinr)
#library(Biostrings)
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T)
}
copy_number=2
read_length=300
all_copies <- read.fasta("Carpiodes_carpio_Paralogs_original.txt",
seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
if (max(dist_final)>read_length)
stop ("Distance between variable sites is larger than the read length, chimeric sequences may formed during assembling!")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/2),xlim=c(0,read_length+100),breaks=20,col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, 0, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink()
dev.off()
library(copyseparator)
#' @title copy_validate
#'
#' @description This function checks if chimeric sequences may have been formed during the assembling of gene copies.
#'
#' @param filename A DNA alignment in fasta format that contains sequences of two or more gene copies.
#'
#' @param copy_number An interger (e.g. 2,3, or 4) giving the number of gene copies in the input file.
#'
#' @param read_length An interger (e.g. 250, or 300) giving the read length of your Next-generation sequencing data.
#'
#' @return A histogram in pdf format showing the comparison between the distance among neighboring variable sites and the read length.
#'
#' @examples  copy_validate(filename,copy_number=2,read_length=300)
#'
#' @export copy_validate
#'
#' @importFrom seqinr read.fasta
#'
copy_validate<-function(filename,copy_number,read_length)
{
#library(seqinr)
#library(Biostrings)
sink("log.txt", append=FALSE, split=TRUE) # begin to record log
error_log_function <- function() {
cat(geterrmessage(), file="Error_log.txt", append=T) # begin to record error log
}
all_copies <- read.fasta(filename, seqtype = "DNA", as.string = TRUE,forceDNAtolower = FALSE,set.attributes = FALSE)
all_dist <-  character(0)
for (i in 1:(copy_number)) {
for (j in i:(copy_number)) {
Paralog_diff <- which(unlist(strsplit(all_copies[[i]], ""))!=unlist(strsplit(all_copies[[j]], "")))
dist_var_sites <- sapply(2:length(Paralog_diff), function(x) Paralog_diff[x]-Paralog_diff[x-1])
all_dist <- append(all_dist,  dist_var_sites)
cat(paste0("Copy ", i, " and Copy ", j, " is different at site: ", Paralog_diff,"\n"))
#print(dist_var_sites)
}
}
dist_final <- sort(as.numeric(all_dist))
if (max(dist_final)>read_length)
cat ("Warning! Distance between variable sites is larger than the read length (see the plot in pdf), chimeric sequences may have formed during assembling!", "\n")
text_to_show <- "read_length"
pdf(file="Variable sites distribution among gene copies.pdf", width=8, height=8)
hist(dist_final,main="Distance among neighboring variable sites VS. Read length", xlab="Base pairs",
ylim=c(0,length(dist_final)/2),xlim=c(0,read_length+100),breaks=20,col="blue")
abline(v=read_length, col="red", lwd=3, lty=2)
text(read_length, length(dist_final)/2, text_to_show, pos = 4, offset = 0.5)
options("error" = error_log_function)
sink() # turn off log
dev.off()
}
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
setwd("~/Desktop/copyseparator")
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
setwd("~/Desktop/copyseparator")
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copyseparator::copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copyseparator::copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
search()
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
search()
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
devtools::document()
library(devtools)
install.packages("devtools")
library(devtools)
devtools::document()
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
library(copyseparator)
devtools::document()
devtools::document()
copy_validate("Carpiodes_carpio_Paralogs_original.txt",2,300)
description
description()
?copy_assemble
?copy_assemble
?copy_separate
use_description()
library(devtools)
use_description()
use_description()
library(copyseparator)
devtools::document()
library(copyseparator)
devtools::check()
devtools::document()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::check()
devtools::document()
library(copyseparator)
devtools::check()
devtools::check()
devtools::document()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::document()
devtools::document()
library(copyseparator)
devtools::check()
devtools::document()
library(copyseparator)
devtools::check()
devtools::document()
library(copyseparator)
devtools::check()
devtools::document()
library(copyseparator)
devtools::check()
devtools::document()
library(copyseparator)
devtools::document()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::document()
devtools::check()
library(copyseparator)
devtools::document()
devtools::check()
library(copyseparator)
devtools::document()
devtools::check()
library(copyseparator)
devtools::document()
devtools::check()
library(copyseparator)
devtools::document()
devtools::check()
library(copyseparator)
devtools::document()
devtools::check()
library(copyseparator)
devtools::document()
devtools::check()
library(copyseparator)
devtools::check()
devtools::document()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(copyseparator)
devtools::document()
library(copyseparator)
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::check()
library(copyseparator)
devtools::check()
library(copyseparator)
copy_separate("Sucker.fasta",2,300,225)
copy_assemble("Sucker_combined_consensus_2copies_overlap225.txt",2)
copy_validate("All_final_copies.fasta",2,300)
library(copyseparator)
copy_validate("All_final_copies.fasta",2,300)
copy_assemble("Sucker_combined_consensus_2copies_overlap225.txt",2)
library(copyseparator)
usethis::use_news_md
usethis::use_vignette("NAME-OF-VIGNETTE")
devtools::document()
devtools::check()
library(copyseparator)
subset_downsize("Sucker.fasta", 300,225)
subset_downsize("Sucker.fasta", 300,225)
copy_detect("Subset_1_downsized.fasta",2)
copy_detect("Subset_1_downsized.fasta",2,0.5)
copy_detect("Subset_1_downsized.fasta",2,0.5)
usethis::use_news_md
devtools::document()
library(copyseparator)
devtools::check()
rhub::check_for_cran()
install.packages("rhub")
rhub::check_for_cran()
library(copyseparator)
devtools::document()
library(copyseparator)
